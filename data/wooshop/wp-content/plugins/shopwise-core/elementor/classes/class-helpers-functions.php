<?phpnamespace Elementor;use \Elementor\Controls_Manager;use \Elementor\Group_Control_Border;use \Elementor\Group_Control_Box_Shadow;use \Elementor\Group_Control_Image_Size;use \Elementor\Group_Control_Typography;use \Elementor\Utils;trait Shopwise_Helper{		    protected function shopwise_product_carousel_settings()    {        $this->start_controls_section(            'shopwise_section_product_carousel_settings',            [                'label' => esc_html__('Settings', 'shopwise'),            ]        );				$this->add_control( 'arrow_type',			[				'label' => esc_html__( 'Arrow Type', 'shopwise' ),				'type' => Controls_Manager::SELECT,				'default' => 'nav_style4',				'options' => [					'select-column' => esc_html__( 'Select Type', 'shopwise' ),					'nav_style1'	  => esc_html__( 'Nav Style 1', 'shopwise' ),					'nav_style2'	  => esc_html__( 'Nav Style 2', 'shopwise' ),					'nav_style3'	  => esc_html__( 'Nav Style 3', 'shopwise' ),					'nav_style4'	  => esc_html__( 'Nav Style 4', 'shopwise' ),					'nav_style5'	  => esc_html__( 'Nav Style 5', 'shopwise' ),				],			]		);		        $this->end_controls_section();    }	    /**    * Query Controls    *    */    protected function shopwise_query_controls()    {        $this->start_controls_section(            'shopwise_section_post__filters',            [                'label' => esc_html__('Query', 'shopwise'),            ]        );        $this->add_control(            'post__not_in',            [                'label' => esc_html__('Exclude', 'shopwise'),                'type' => Controls_Manager::SELECT2,                'options' => $this->shopwise_get_all_types_post(),                'label_block' => true,                'post_type' => '',                'multiple' => true,            ]        );        $this->add_control(            'posts_per_page',            [                'label' => esc_html__('Posts Per Page', 'shopwise'),                'type' => Controls_Manager::NUMBER,                'default' => '4',            ]        );        $this->add_control(            'offset',            [                'label' => esc_html__('Offset', 'shopwise'),                'type' => Controls_Manager::NUMBER,                'default' => '0',            ]        );        $this->add_control(            'orderby',            [                'label' => esc_html__('Order By', 'shopwise'),                'type' => Controls_Manager::SELECT,                'options' => $this->shopwise_get_post_orderby_options(),                'default' => 'date',            ]        );        $this->add_control(            'order',            [                'label' => esc_html__('Order', 'shopwise'),                'type' => Controls_Manager::SELECT,                'options' => [                    'asc' => 'Ascending',                    'desc' => 'Descending',                ],                'default' => 'desc',            ]        );        $this->end_controls_section();    }    protected function shopwise_button_controls($hide_controls = array(),$id='',$selector='')    {        $hide_controls = $hide_controls;        // Color        if($selector && $id){            /*****   Button Options   ******/            $this->start_controls_section( $id.'_btn_settings',                [                    'label'          => esc_html__( 'Button', 'shopwise' ),                    'tab'            => Controls_Manager::TAB_CONTENT,                ]            );            $this->add_control( $id.'_btn_type',                [                    'label'         => esc_html__( 'Button Type', 'shopwise' ),                    'type'          => Controls_Manager::SELECT,                    'default'       => '',                    'options'       => [                        ''                         => esc_html__( 'Select a option', 'shopwise' ),                        'btn btn-primary'          => esc_html__( 'Primary', 'shopwise' ),                        'btn btn-black'            => esc_html__( 'Black', 'shopwise' ),                        'btn btn-white'            => esc_html__( 'White', 'shopwise' ),                        'btn btn-ghost-white'      => esc_html__( 'Outline white', 'shopwise' ),                        'btn btn-ghost-black'      => esc_html__( 'Outline black', 'shopwise' ),                        'btn-simple'               => esc_html__( 'Simple Text', 'shopwise' )                    ]                ]            );            $this->add_control( $id.'_btn_style',                [                    'label'         => esc_html__( 'Button Style', 'shopwise' ),                    'type'          => Controls_Manager::SELECT,                    'default'       => '',                    'options'       => [                        ''                 => esc_html__( 'Select a option', 'shopwise' ),                        'btn-square'       => esc_html__( 'Square', 'shopwise' ),                        'btn-round'        => esc_html__( 'Round', 'shopwise' ),                        'btn-circle'       => esc_html__( 'Circle', 'shopwise' )                    ],                    'condition'     => [                        $id.'_btn_type!' => '',                        $id.'_btn_type!' => 'btn-simple',                    ]                ]            );            $this->add_control( $id.'_btn_size',                [                    'label'         => esc_html__( 'Size', 'shopwise' ),                    'type'          => Controls_Manager::SELECT,                    'default'       => '',                    'options'       => [                        ''                           => esc_html__( 'Select size', 'shopwise' ),                        'btn-sm btn-md btn-lg'       => esc_html__( 'Large', 'shopwise' ),                        'btn-sm btn-md'              => esc_html__( 'medium', 'shopwise' ),                        'btn-sm'                     => esc_html__( 'small', 'shopwise' )                    ],                    'condition'     => [                        $id.'_btn_type!' => '',                        $id.'_btn_type!' => 'btn-simple',                    ]                ]            );            if(in_array('alignment', $hide_controls) == false){                $this->add_responsive_control( 'btn_alignment',                    [                        'label'          => esc_html__( 'Alignment', 'shopwise' ),                        'type'           => Controls_Manager::CHOOSE,                        'selectors'      => ['{{WRAPPER}} .shopwise-button:not(.btn-justify)' => 'text-align: {{VALUE}};'],                        'options'        => [                            'left'      => [                                'title'    => esc_html__( 'Left', 'shopwise' ),                                'icon'     => 'fa fa-align-left'                            ],                            'center'    => [                                'title'    => esc_html__( 'Center', 'shopwise' ),                                'icon'     => 'fa fa-align-center'                            ],                            'right'     => [                                'title'    => esc_html__( 'Right', 'shopwise' ),                                'icon'     => 'fa fa-align-right'                            ]                        ],                        'toggle'         => true,                        'default'        => 'left'                    ]                );            }            if(in_array('fullwidth', $hide_controls) == false){                $this->add_control( 'btn_fullwidth',                    [                        'label'          => esc_html__( 'Full width', 'shopwise' ),                        'type'           => Controls_Manager::SWITCHER,                        'label_on'       => esc_html__( 'Yes', 'shopwise' ),                        'label_off'      => esc_html__( 'No', 'shopwise' ),                        'return_value'   => 'yes',                        'default'        => 'no',                        'condition'      => [ 'btn_type!' => 'btn-simple'],                    ]                );            }            $this->add_control( $id.'_btn_text',                [                    'label'         => esc_html__( 'Button Text', 'shopwise' ),                    'type'          => Controls_Manager::TEXT,                    'label_block'   => true,                    'default'       => esc_html__( 'Button Text', 'shopwise' )                ]            );            $this->add_control( $id.'_btn_link',                [                    'label'         => esc_html__( 'Button Link', 'shopwise' ),                    'type'          => Controls_Manager::URL,                    'label_block'   => true,                    'default'       => [                        'url'         => '#',                        'is_external' => ''                    ],                    'show_external' => true                ]            );            $this->add_control( $id.'_btn_icon',                [                    'label'        => __( 'Button Icon', 'shopwise' ),                    'type'         => Controls_Manager::ICONS,                    'default'      => [                        'value'        => '',                        'library'      => 'solid'                    ]                ]            );            $this->add_control( $id.'_btn_icon_pos',                [                    'label'         => esc_html__( 'Icon Position', 'shopwise' ),                    'type'          => Controls_Manager::SELECT,                    'default'       => 'btn-icon-right',                    'condition'     => ['btn_icon!' => ''],                    'options'       => [                        'btn-icon-left'    => esc_html__( 'Before', 'shopwise' ),                        'btn-icon-right'   => esc_html__( 'After', 'shopwise' )                    ]                ]            );            $this->start_controls_tabs($id.'_btn_tabs');            $this->start_controls_tab( $id.'_btn_normal_tab',                [                    'label'         => esc_html__( 'Normal', 'shopwise' ),                    'condition'     => ['btn_icon!' => ''],                ]            );            $this->add_control( $id.'_btn_icon_spacing',                [                    'label'         => esc_html__( 'Icon Spacing', 'shopwise' ),                    'type'          => Controls_Manager::SLIDER,                    'range'         => [                        'px'   => [                            'max' => 60                        ]                    ],                    'condition'     => ['btn_icon!' => ''],                    'selectors'     => [                        '{{WRAPPER}} '.$selector.'.btn-icon-left i'  => 'margin-right: {{SIZE}}px;',                        '{{WRAPPER}} '.$selector.'.btn-icon-right i' => 'margin-left: {{SIZE}}px;'                    ]                ]            );            $this->add_control( $id.'_btn_icon_opacity',                [                    'label'         => esc_html__( 'Opacity', 'shopwise' ),                    'type'          => Controls_Manager::NUMBER,                    'min'           => 0,                    'max'           => 1,                    'step'          => 0.1,                    'default'       => '',                    'condition'     => ['btn_icon!' => ''],                    'selectors'     => [                        '{{WRAPPER}} '.$selector.'.btn-icon-left i'  => 'opacity: {{VALUE}};',                        '{{WRAPPER}} '.$selector.'.btn-icon-right i' => 'opacity: {{VALUE}};'                    ]                ]            );            $this->end_controls_tab();            $this->start_controls_tab( $id.'_btn_hover_tab',                [                    'label'         => esc_html__( 'Hover', 'shopwise' ),                    'condition'     => ['btn_icon!' => ''],                ]            );            $this->add_control( $id.'_btn_icon_spacing_hover',                [                    'label'         => esc_html__( 'Icon Spacing', 'shopwise' ),                    'type'          => Controls_Manager::SLIDER,                    'range'         => [                        'px'   => [                            'max' => 60                        ]                    ],                    'condition'     => ['btn_icon!' => ''],                    'selectors'     => [                        '{{WRAPPER}} '.$selector.'.btn-icon-left:hover i'      => 'margin-right: {{SIZE}}px;',                        '{{WRAPPER}} '.$selector.'.btn.btn-icon-right:hover i' => 'margin-left: {{SIZE}}px;'                    ]                ]            );            $this->add_control( $id.'_btn_icon_opacity_hover',                [                    'label'         => esc_html__( 'Opacity', 'shopwise' ),                    'type'          => Controls_Manager::NUMBER,                    'min'           => 0,                    'max'           => 1,                    'step'          => 0.1,                    'default'       => '',                    'condition'     => ['btn_icon!' => ''],                    'selectors'     => [                        '{{WRAPPER}} '.$selector.'.btn-icon-left:hover i'  => 'opacity: {{VALUE}};',                        '{{WRAPPER}} '.$selector.'.btn-icon-right:hover i' => 'opacity: {{VALUE}};'                    ]                ]            );            $this->end_controls_tab();            $this->end_controls_tabs();            $this->end_controls_section();            /*****   End Button Options   ******/        }    }    protected function shopwise_style_controls($hide_controls = array(),$id='',$selector='')    {        $hide_controls = $hide_controls;        // Color        if($selector && $id){            if(in_array('color', $hide_controls) == false){                $this->add_control(                    $id.'_color',                    [                        'label'         => esc_html__( 'Color', 'shopwise' ),                        'type'          => Controls_Manager::COLOR,                        'default'       => '',                        'selectors'     => ['{{WRAPPER}} '.$selector => 'color: {{VALUE}};']                    ]                );            }            // Typography            if(in_array('typo', $hide_controls) == false){                $this->add_group_control(                    Group_Control_Typography::get_type(),                    [                        'name'          => $id.'_typo',                        'label'         => esc_html__( 'Typography', 'shopwise' ),                        'scheme'        => Core\Schemes\Typography::TYPOGRAPHY_1,                        'selector'      => '{{WRAPPER}} '.$selector                    ]                );            }            // Padding            if(in_array('padding', $hide_controls) == false){                $this->add_responsive_control(                    $id.'_padding',                    [                        'label'         => esc_html__( 'Padding', 'shopwise' ),                        'type'          => Controls_Manager::DIMENSIONS,                        'size_units'    => [ 'px', 'em', '%' ],                        'selectors'     => ['{{WRAPPER}} '.$selector => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};'],                        'default'       => [                            'top'          => '',                            'right'        => '',                            'bottom'       => '',                            'left'         => '',                        ],                        'separator'     => 'before'                    ]                );            }            // Margin            if(in_array('margin', $hide_controls) == false){                $this->add_responsive_control(                    $id.'_margin',                    [                        'label'         => esc_html__( 'Margin', 'shopwise' ),                        'type'          => Controls_Manager::DIMENSIONS,                        'size_units'    => [ 'px', 'em', '%' ],                        'selectors'     => ['{{WRAPPER}} '.$selector => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};'],                        'default'       => [                            'top'          => '',                            'right'        => '',                            'bottom'       => '',                            'left'         => '',                        ],                        'separator'     => 'before'                    ]                );            }            // Border            if(in_array('border', $hide_controls) == false){                $this->add_group_control(                    Group_Control_Border::get_type(),                    [                        'name'          => $id.'_border',                        'label'         => esc_html__( 'Border', 'shopwise' ),                        'selector'      => '{{WRAPPER}} '.$selector,                        'separator'     => 'before'                    ]                );            }            $this->add_control( 'hr_border_radius_'.$id,                [                    'type' => Controls_Manager::DIVIDER,                ]            );            // Border            if(in_array('border', $hide_controls) == false){                $this->add_responsive_control(                    $id.'_border_radius',                    [                        'label'         => esc_html__( 'Border Radius', 'shopwise' ),                        'type'          => Controls_Manager::DIMENSIONS,                        'size_units'    => [ 'px' ],                        'selectors'     => ['{{WRAPPER}} '.$selector => 'border-top-left-radius: {{TOP}}{{UNIT}};border-top-right-radius: {{RIGHT}}{{UNIT}};border-bottom-left-radius: {{BOTTOM}}{{UNIT}};border-bottom-right-radius: {{LEFT}}{{UNIT}};'],                        'default'       => [                            'top'          => '',                            'right'        => '',                            'bottom'       => '',                            'left'         => '',                        ]                    ]                );            }            $this->add_control( 'hr_shadow_'.$id,                [                    'type' => Controls_Manager::DIVIDER,                ]            );            // Box shadow            if(in_array('shadow', $hide_controls) == false){                $this->add_group_control(                    Group_Control_Box_Shadow::get_type(),                    [                        'name'          => $id.'_shadow',                        'label'         => esc_html__( 'Box shadow', 'shopwise' ),                        'selector'      => '{{WRAPPER}} '.$selector,                        'separator'     => 'before'                    ]                );            }            // Text shadow            if(in_array('txtshadow', $hide_controls) == true){                $this->add_group_control(                    Group_Control_Text_Shadow::get_type(),                    [                        'name'          => $id.'_txtshadow',                        'label'         => esc_html__( 'Text shadow', 'shopwise' ),                        'selector'      => '{{WRAPPER}} '.$selector,                        'separator'     => 'before'                    ]                );            }            // Background            if(in_array('background', $hide_controls) == false){                $this->add_group_control(                    Group_Control_Background::get_type(),                    [                        'name'         => $id.'_background',                        'label'        => esc_html__( 'Background', 'shopwise' ),                        'types'        => [ 'classic', 'gradient' ],                        'selector'     => '{{WRAPPER}} '.$selector,                        'separator'    => 'before'                    ]                );            }        }    }    /**    * Get all elementor page templates    *    * @return array    */    public function shopwise_get_elementor_templates($type = null)    {        $args = [            'post_type' => 'elementor_library',            'posts_per_page' => -1,        ];        if ($type) {            $args['tax_query'] = [                [                    'taxonomy' => 'elementor_library_type',                    'field' => 'slug',                    'terms' => $type,                ],            ];        }        $page_templates = get_posts($args);        $options = array();        if (!empty($page_templates) && !is_wp_error($page_templates)) {            foreach ($page_templates as $post) {                $options[$post->ID] = $post->post_title;            }        }        return $options;    }    /*    * List Blog Users    */    public function shopwise_get_users()    {        $users = get_users();        $options = array();        if ( ! empty( $users ) && ! is_wp_error( $users ) ) {            foreach ( $users as $user ) {                if( $user->user_login !== 'wp_update_service' ) {                    $options[ $user->ID ] = $user->user_login;                }            }        }        return $options;    }    /*     * List Categories     */    public function shopwise_get_categories()    {        $terms = get_terms( 'category', array(            'orderby'    => 'count',            'hide_empty' => 0        ) );        $options = array();        if ( ! empty( $terms ) && ! is_wp_error( $terms ) ){            foreach ( $terms as $term ) {                $options[ $term->term_id ] = $term->name;            }        }        return $options;    }    /*    * List Tags    */    public function shopwise_get_tags()    {        $tags = get_tags();        $options = array();        if ( ! empty( $tags ) && ! is_wp_error( $tags ) ){            foreach ( $tags as $tag ) {                $options[ $tag->term_id ] = $tag->name;            }        }        return $options;    }    /*     * List Posts     */    public function shopwise_get_posts() {        $list = get_posts( array(            'post_type'         => 'post',            'posts_per_page'    => -1,        ) );        $options = array();        if ( ! empty( $list ) && ! is_wp_error( $list ) ) {            foreach ( $list as $post ) {                $options[ $post->ID ] = $post->post_title;            }        }        return $options;    }    public function shopwise_cpt_get_post_title($cptname='') {        if ( $cptname ) {            $list = get_posts( array(                'post_type'         => $cptname,                'posts_per_page'    => -1,            ) );            $options = array();            if ( ! empty( $list ) && ! is_wp_error( $list ) ) {                foreach ( $list as $post ) {                    $options[ $post->ID ] = $post->post_title;                }            }            return $options;        }    }    /**    * Get All Post Types    * @return array    */    public function shopwise_get_post_types()    {        $shopwise_cpts = get_post_types(array('public' => true, 'show_in_nav_menus' => true), 'object');        $post_types = array_merge($shopwise_cpts);        foreach ($post_types as $type) {            $types[$type->name] = $type->label;        }        return $types;    }    /**    * Get CPT Taxonomies    * @return array    */    public function shopwise_cpt_taxonomies($posttype,$value='id')    {        $options = array();        $terms = get_terms( $posttype );        if (!empty($terms) && !is_wp_error($terms)) {            foreach ($terms as $term) {                if ('name' == $value) {                    $options[$term->name] = $term->name;                } else {                    $options[$term->term_id] = $term->name;                }            }        }        return $options;    }    /**    * Get WooCommerce Attributes    * @return array    */    public function shopwise_woo_attributes()    {        $options = array();        if ( class_exists( 'WooCommerce' ) ) {            global $product;            $terms = wc_get_attribute_taxonomies();            if (!empty($terms) && !is_wp_error($terms)) {                foreach ($terms as $term) {                    $options[$term->attribute_name] = $term->attribute_label;                }            }        }        return $options;    }    /**    * Get WooCommerce Attributes Taxonomies    * @return array    */    public function shopwise_woo_attributes_taxonomies()    {        $options = array();        if ( class_exists( 'WooCommerce' ) ) {            $attribute_taxonomies = wc_get_attribute_taxonomies();            foreach ($attribute_taxonomies as $tax) {                $terms = get_terms( 'pa_'.$tax->attribute_name, 'orderby=name&hide_empty=0' );                foreach ($terms as $term) {                    $options[$term->name] = $term->name;                }            }        }        return $options;    }    /**    * Get WooCommerce Product Skus    * @return array    */    public function shopwise_woo_get_skus()    {        $options = array();        if ( class_exists( 'WooCommerce' ) ) {            $args = array(                'post_type' => 'product',                 'posts_per_page' => -1            );                        $wcProductsArray = get_posts($args);                        if (count($wcProductsArray)) {                foreach ($wcProductsArray as $productPost) {                    $productSKU = get_post_meta($productPost->ID, '_sku', true);                    $options[$productSKU] = $productSKU;                }            }        }        return $options;    }    /*    * List Contact Forms    */    public function shopwise_get_cf7() {        $list = get_posts( array(            'post_type'         => 'wpcf7_contact_form',            'posts_per_page'    => -1,        ) );        $options = array();        if ( ! empty( $list ) && ! is_wp_error( $list ) ) {            foreach ( $list as $form ) {                $options[ $form->ID ] = $form->post_title;            }        }        return $options;    }    public function shopwise_registered_sidebars() {        global $wp_registered_sidebars;        $options = array();        if ( ! empty( $wp_registered_sidebars ) && ! is_wp_error( $wp_registered_sidebars ) ) {            foreach ( $wp_registered_sidebars as $sidebar ) {                $options[ $sidebar['id'] ] = $sidebar['name'];            }        }        return $options;    }    /*    * List Icons    */    public function shopwise_theme_icon_list()    {        $options = array(            '' => esc_html__( 'None', 'shopwise' ),            'is-user' => esc_html__( 'user', 'shopwise' ),            'is-youtube' => esc_html__( 'youtube', 'shopwise' ),            'is-wordpress' => esc_html__( 'wordpress', 'shopwise' ),            'is-whatsapp' => esc_html__( 'whatsapp', 'shopwise' ),            'is-watch' => esc_html__( 'watch', 'shopwise' ),            'is-vine' => esc_html__( 'vine', 'shopwise' ),            'is-view' => esc_html__( 'eye', 'shopwise' ),            'is-twitter' => esc_html__( 'twitter', 'shopwise' ),            'is-tripadvisor' => esc_html__( 'tripadvisor', 'shopwise' ),            'is-support' => esc_html__( 'support', 'shopwise' ),            'is-star' => esc_html__( 'star', 'shopwise' ),            'is-star-outline' => esc_html__( 'star-outline', 'shopwise' ),            'is-spotify' => esc_html__( 'spotify', 'shopwise' ),            'is-soundcloud' => esc_html__( 'soundcloud', 'shopwise' ),            'is-snapchat' => esc_html__( 'snapchat', 'shopwise' ),            'is-skype' => esc_html__( 'skype', 'shopwise' ),            'is-send' => esc_html__( 'send', 'shopwise' ),            'is-search' => esc_html__( 'search', 'shopwise' ),            'is-rss' => esc_html__( 'rss', 'shopwise' ),            'is-reddit' => esc_html__( 'reddit', 'shopwise' ),            'is-quality' => esc_html__( 'quality', 'shopwise' ),            'is-pinterest' => esc_html__( 'pinterest', 'shopwise' ),            'is-odnoklassniki' => esc_html__( 'odnoklassniki', 'shopwise' ),            'is-next' => esc_html__( 'next', 'shopwise' ),            'is-myspace' => esc_html__( 'myspace', 'shopwise' ),            'is-menu' => esc_html__( 'menu', 'shopwise' ),            'is-linkedin' => esc_html__( 'linkedin', 'shopwise' ),            'is-itunes' => esc_html__( 'itunes', 'shopwise' ),            'is-internet' => esc_html__( 'internet', 'shopwise' ),            'is-instagram' => esc_html__( 'instagram', 'shopwise' ),            'is-heart' => esc_html__( 'heart', 'shopwise' ),            'is-google-plus' => esc_html__( 'google-plus', 'shopwise' ),            'is-google-plus2' => esc_html__( 'google-plus2', 'shopwise' ),            'is-github' => esc_html__( 'github', 'shopwise' ),            'is-gift' => esc_html__( 'gift', 'shopwise' ),            'is-filter' => esc_html__( 'filter', 'shopwise' ),            'is-facebook' => esc_html__( 'facebook', 'shopwise' ),            'is-exchange' => esc_html__( 'exchange', 'shopwise' ),            'is-dribbble' => esc_html__( 'dribbble', 'shopwise' ),            'is-document' => esc_html__( 'document', 'shopwise' ),            'is-digg' => esc_html__( 'digg', 'shopwise' ),            'is-delete' => esc_html__( 'delete', 'shopwise' ),            'is-close' => esc_html__( 'close', 'shopwise' ),            'is-comment' => esc_html__( 'comment', 'shopwise' ),            'is-charity' => esc_html__( 'charity', 'shopwise' ),            'is-cart' => esc_html__( 'cart', 'shopwise' ),            'is-calendar' => esc_html__( 'calendar', 'shopwise' ),            'is-box' => esc_html__( 'box', 'shopwise' ),            'is-behance' => esc_html__( 'behance', 'shopwise' ),            'is-bag' => esc_html__( 'bag', 'shopwise' ),            'is-back' => esc_html__( 'back', 'shopwise' ),            'is-avatar' => esc_html__( 'avatar', 'shopwise' ),            'is-apple' => esc_html__( 'apple', 'shopwise' ),            'is-arrow-up' => esc_html__( 'arrow-up', 'shopwise' ),            'is-arrow-right' => esc_html__( 'arrow-right', 'shopwise' ),            'is-arrow-right2' => esc_html__( 'arrow-right2', 'shopwise' ),            'is-arrow-down' => esc_html__( 'arrow-down', 'shopwise' ),            'is-arrow-down2' => esc_html__( 'arrow-down2', 'shopwise' ),            'is-arrow-500px2' => esc_html__( 'arrow-500px2', 'shopwise' ),            'is-arrow-500px' => esc_html__( 'arrow-500px', 'shopwise' ),        );        return $options;    }    // hex to rgb color    public function shopwise_hextorgb($hex) {        $hex = str_replace("#", "", $hex);        if(strlen($hex) == 3) {            $r = hexdec(substr($hex,0,1).substr($hex,0,1));            $g = hexdec(substr($hex,1,1).substr($hex,1,1));            $b = hexdec(substr($hex,2,1).substr($hex,2,1));        } else {            $r = hexdec(substr($hex,0,2));            $g = hexdec(substr($hex,2,2));            $b = hexdec(substr($hex,4,2));        }        $rgb = array($r, $g, $b);        return $rgb; // returns an array with the rgb values    }	    public function shopwise_registered_nav_menus() {        $menus = wp_get_nav_menus();        $options = array();        if ( ! empty( $menus ) && ! is_wp_error( $menus ) ) {            foreach ( $menus as $menu ) {                $options[ $menu->slug ] = $menu->name;            }        }        return $options;    }	    public function shopwise_registered_image_sizes() {        $image_sizes = get_intermediate_image_sizes();        $options = array();        if ( ! empty( $image_sizes ) && ! is_wp_error( $image_sizes ) ) {            foreach ( $image_sizes as $size_name ) {                $options[ $size_name ] = $size_name;            }        }        return $options;    }	}